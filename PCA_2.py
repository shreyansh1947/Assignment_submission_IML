# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ef7fVLF6hmHdiXx7xcmC6j3TkSryCWIm
"""

import numpy as np
from sklearn.datasets import make_classification
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA

# Generate Random Data
m = 100
n = 100
dataset = make_classification(n_samples=m, n_features=n, random_state=42)

# Separate features and labels
features = dataset[0]
labels = dataset[1]

# Plot all the features with different colors based on labels
plt.scatter(features[labels == 0, 0], features[labels == 0, 1], color='red', label='Class 0')
plt.scatter(features[labels == 1, 0], features[labels == 1, 1], color='blue', label='Class 1')
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.title("Scatter Plot of Features")
plt.legend()
plt.show()

def manual_pca(dataset, n_comp):
    # Normalize the data
    dataset = dataset - np.mean(dataset, axis=0)

    # Covariance matrix
    cov = np.cov(dataset.T)

    # Eigenvalues and Eigenvectors
    eig_val, eigen_vec = np.linalg.eig(cov)

    # Sort the eigenvalues
    idx = eig_val.argsort()[::-1]
    eig_val = eig_val[idx]
    eigen_vec = eigen_vec[:, idx]

    proj_mat = eigen_vec[:, :n_comp]
    dataset = np.dot(dataset, proj_mat)

    return dataset

# Apply manual PCA
reduced_data_manual = manual_pca(features, 2)
reduced_data_manual = pd.DataFrame(reduced_data_manual)
reduced_data_manual.columns = ["Principal Component 1", "Principal Component 2"]
print("Manual PCA Results:")
print(reduced_data_manual.head())

# Apply PCA using scikit-learn's PCA function
pca = PCA(n_components=2)
reduced_data_sklearn = pca.fit_transform(features)
reduced_data_sklearn = pd.DataFrame(reduced_data_sklearn, columns=["Principal Component 1", "Principal Component 2"])
print("\nScikit-Learn PCA Results:")
print(reduced_data_sklearn.head())